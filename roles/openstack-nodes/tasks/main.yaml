- name: Get cloud configuration
  tags: bootstrap
  os_client_config:

- name: Create OpenStack instance
  os_server:
    security_groups: "sg-{{ name }}-nodes"
    state: "{{ state }}"
    name: "{{ name }}-{{ item }}"
    image: "{{ lookup('env','IMAGE') | default('xenial-server-cloudimg-amd64', true) }}"
    key_name: "{{ lookup('env','KEY') }}"
    flavor_ram: "{{ lookup('env','NODE_MEMORY') | default('4096', true) }}"
    nics:
      - net-name: "{{ lookup('env', 'NETWORK') | default(omit) }}"
    auto_ip: false
    userdata: |
      #cloud-config
      package_upgrade: true
      hostname: "{{ name }}-{{ item }}"
      manage_etc_hosts: true
  register: "instances"
  with_sequence: count={{ node_count }}

- name: Delete security group
  tags: bootstrap
  os_security_group:
    name: "sg-{{ name }}"
    state: absent
  when: state == "absent"

- name: Update inventory
  add_host:
    name: "{{ item.server.name }}"
    ansible_ssh_host: "{{ item.server.interface_ip }}"
    ansible_ssh_user: ubuntu
    ansible_ssh_common_args: "-o ProxyCommand=\"ssh -W %h:%p -q ubuntu@{{ hostvars[groups.master[0]]['ansible_ssh_host'] }}\""
    groupname: nodes
  with_items: "{{ instances.results }}"
  when: state == "present"

- name: Wait during instances boot
  tags: bootstrap
  wait_for:
    host: "{{ item.server.interface_ip }}"
    port: 22
    search_regex: OpenSSH
  with_items: "{{ instances.results }}"
  when: state == "present"

- name: Allow SSH keys on first connection
  shell: "ssh-keyscan {{ item.server.interface_ip }} >> ~/.ssh/known_hosts"
  with_items: "{{ instances.results }}"
  when: state == "present"
