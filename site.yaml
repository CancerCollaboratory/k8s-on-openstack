---
- name: Launch k8s nodes
  hosts: localhost
  tasks:
  - os_client_config:
      clouds:
        - "{{ cloud }}"

  # Create security group before instances
  - os_security_group:
      cloud: "{{ cloud }}"
      name: "sg-{{ name }}"
      state: present
    when: state == "present"

  - os_security_group_rule:
      cloud: "{{ cloud }}"
      security_group: "sg-{{ name }}"
      remote_ip_prefix: 0.0.0.0/0
    when: state == "present"

  - os_security_group_rule:
      cloud: "{{ cloud }}"
      security_group: "sg-{{ name }}"
      remote_group: "sg-{{ name }}"
    when: state == "present"

  - os_server:
      cloud: "{{ cloud }}"
      security_groups: "sg-{{ name }}"
      state: "{{ state }}"
      name: "{{ name }}-{{ item }}"
      image: "{{ image }}"
      key_name: "{{ key_name }}"
      flavor_ram: "{{ node_memory }}"
      userdata: |
        #cloud-config
        package_upgrade: true
    register: "nodes"
    with_sequence: count="{{ node_count }}"

  - os_security_group:
      cloud: "{{ cloud }}"
      name: "sg-{{ name }}"
      state: absent
    when: state == "absent"

  - add_host:
      name: "{{ item.server.name }}"
      ansible_ssh_host: "{{ item.server.interface_ip }}"
      ansible_ssh_user: ubuntu
      groupname: nodes
    with_items: "{{ nodes.results }}"
    when: state == "present"

  - wait_for:
      host: "{{ item.server.interface_ip }}"
      port: 22
      search_regex: OpenSSH
    with_items: "{{ nodes.results }}"
    when: state == "present"

  - shell: "ssh-keyscan {{ item.server.interface_ip }} >> ~/.ssh/known_hosts"
    with_items: "{{ nodes.results }}"
    when: state == "present"

- name: Node preparation
  hosts: nodes
  gather_facts: false

  pre_tasks:
    - raw: while ! test -f /var/lib/cloud/instance/boot-finished; do sleep 1; done; sudo apt-get update && sudo apt-get -y install python-simplejson

    - action: setup

- name: Install repo and packages
  hosts: nodes
  become: true
  tasks:
    - apt_key:
        url: 'https://packages.cloud.google.com/apt/doc/apt-key.gpg'
        state: present

    - apt_repository:
        repo: deb http://apt.kubernetes.io/ kubernetes-xenial main
        state: present

    - apt:
        name: "{{item}}"
        state: installed
        update_cache: yes
      with_items:
        - docker.io
        - kubelet
        - kubeadm
        - kubectl
        - kubernetes-cni

    - name: add hosts
      lineinfile:
        dest: "/etc/hosts"
        regexp: ".*{{ hostvars[item].ansible_hostname }}$"
        line: "{{ hostvars[item].ansible_default_ipv4.address }} {{ hostvars[item].ansible_hostname }}"
        state: present
      when: hostvars[item].ansible_hostname is defined
      with_items: "{{groups['all'] | default([])}}"

    - template:
        src: files/cloud-config.j2
        dest: /etc/kubernetes/cloud-config
        mode: 0600

    - copy:
        src: files/10-kubeadm.conf
        dest: /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
        mode: 0600

    - systemd:
        state: restarted
        daemon_reload: yes
        name: kubelet

- name: k8s cluster setup
  hosts: nodes
  become: true
  tasks:
    # Master
    - name: kubeadm token generate
      command: kubeadm token generate
      register: token
      when: inventory_hostname == groups.nodes[0]

#    - name: kubeadm get existing token
#      command: sh -c '/usr/bin/kubectl -n kube-system get secret clusterinfo -o yaml | grep token-map | awk "{print \$2}" | base64 -d | sed "s|{||g;s|}||g;s|:|.|g;s/\"//g;" | xargs echo'
#      register: token
#      when: inventory_hostname == groups.nodes[0]

    - name: kubeadm init
      command: "kubeadm init --cloud-provider openstack --token {{ token.stdout }}"
      args:
        creates: /etc/kubernetes/kubelet.conf
      when: inventory_hostname == groups.nodes[0]

    # Minions
    - name: kubeadm join
      command: "kubeadm join --token {{ hostvars[groups['nodes'][0]]['token'].stdout }} {{ hostvars[groups.nodes[0]]['ansible_default_ipv4']['address'] }}"
      args:
        creates: /etc/kubernetes/kubelet.conf
      when: inventory_hostname != groups.nodes[0]

    # Master
    - name: kubectl apply weave
      command: kubectl apply -f https://git.io/weave-kube
      when: inventory_hostname == groups.nodes[0]

    - name: kubectl apply dashboard
      command: kubectl apply -f https://rawgit.com/kubernetes/dashboard/master/src/deploy/kubernetes-dashboard.yaml
      when: inventory_hostname == groups.nodes[0]

- name: Health check
  hosts: nodes
  tasks:
    - shell: "kubectl get nodes"
      when: inventory_hostname == groups.nodes[0]
      register: nodes

    - debug:
        var: nodes.stdout_lines
      when: inventory_hostname == groups.nodes[0]

    - shell: "kubectl cluster-info"
      when: inventory_hostname == groups.nodes[0]
      register: clusterinfo

    - debug:
        var: clusterinfo.stdout_lines
      when: inventory_hostname == groups.nodes[0]
